name: 'Docs'


on:
  push:
    branches:
      - 'main'


jobs:
  make-docs:
    name: 'Generate Documentation'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: python3 python3-pip doxygen build-essential make

      - name: Install docs pip packages
        run: |
          pip3 install -r docs/requirements.txt

      - name: Generate Doxygen XML
        run: |
          doxygen Doxyfile

      - name: Generate Sphinx HTML
        run: |
          cd docs
          make html
          cd ..

      - name: Archive artifact
        shell: sh
        if: runner.os == 'Linux'
        run: |
          chmod -c -R +rX "$INPUT_PATH" | while read line; do
            echo "::warning title=Invalid file permissions automatically fixed::$line"
          done
          tar \
            --dereference --hard-dereference \
            --directory "$INPUT_PATH" \
            -cvf "$RUNNER_TEMP/artifact.tar" \
            --exclude=.git \
            --exclude=.github \
            .
        env:
          INPUT_PATH: docs/_build/html

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: Docs
          path: ${{ runner.temp }}/artifact.tar
          retention-days: ${{ inputs.retention-days }}
          if-no-files-found: error

  deploy-docs:
    name: 'Deploy Documentation'
    needs: make-docs

    runs-on: ubuntu-latest

    steps:
      - name: Download generated documentation artifact
        uses: actions/download-artifact@v3
        with:
          name: Docs

      - name: Extract artifacts
        run: |
          mkdir -p ./docs_html
          tar -xvf artifact.tar --directory ./docs_html

      - name: Upload
        uses: nogsantos/scp-deploy@v1.3.0
        with:
          src: ./docs_html/*
          host: ${{ secrets.SSH_HOST }}
          remote: /var/www/html/
          port: ${{ secrets.SSH_PORT }}
          user: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
